import React, { useState, useEffect } from 'react';import { Box, Paper, Typography, Grid } from '@mui/material';import { Bar, Scatter } from 'react-chartjs-2';import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement } from 'chart.js';import { supabase } from '../lib/supabaseClient';import { Requirement, Criteria } from '../types/types';ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement);export const Charts = () => {const [requirements, setRequirements] = useState<Requirement[]>([]);const [criteria, setCriteria] = useState<Criteria[]>([]);const [scores, setScores] = useState<any[]>([]);useEffect(() => {fetchData();}, []);const fetchData = async () => {const [reqData, critData, scoreData] = await Promise.all([supabase.from('requirements').select('*').order('rank'),supabase.from('criteria').select('*'),supabase.from('requirement_scores').select('*'),]);setRequirements(reqData.data || []);setCriteria(critData.data || []);setScores(scoreData.data || []);};const getScoreDistributionData = () => {const labels = requirements.map(req => req.title.substring(0, 20) + '...');const data = requirements.map(req => req.weighted_score || 0);return {labels,datasets: [{label: 'Weighted Scores',data,backgroundColor: 'rgba(54, 162, 235, 0.5)',borderColor: 'rgba(54, 162, 235, 1)',borderWidth: 1,}],};};const getScatterPlotData = () => {return {datasets: requirements.map(req => ({label: req.title.substring(0, 20) + '...',data: [{x: req.weighted_score || 0,y: req.rank || 0,}],})),};};const scatterOptions = {scales: {y: {reverse: true,title: {display: true,text: 'Rank',},},x: {title: {display: true,text: 'Weighted Score',},},},plugins: {title: {display: true,text: 'Score vs Rank Correlation',},},};const barOptions = {plugins: {title: {display: true,text: 'Requirement Score Distribution',},},};return (<Box sx={{ p: 3 }}><Typography variant="h5" gutterBottom>Analytics</Typography><Grid container spacing={3}><Grid item xs={12} md={6}><Paper sx={{ p: 2 }}><Bar data={getScoreDistributionData()} options={barOptions} /></Paper></Grid><Grid item xs={12} md={6}><Paper sx={{ p: 2 }}><Scatter data={getScatterPlotData()} options={scatterOptions} /></Paper></Grid></Grid></Box>);};
